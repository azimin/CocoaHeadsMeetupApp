//
// Autogenerated by StyleGenerator - Generator
// by CocoaHeads Team https://github.com/azimin/CocoaHeadsMeetupApp
//

import UIKit

enum Styles {
  enum Button {
    static var Default: Style {
      return get_Default()
    }
    enum Action {
      static var Accept: Style {
        return get_Accept()
      }
      static var Cancel: Style {
        return get_Cancel()
      }
    }
    
  }
  
  enum Text {
    static var Default: Style {
      return get_Default()
    }
    static var Title: Style {
      return get_Title()
    }
  }
  
  static var TextField: Style {
    return get_TextField()
  }
}
extension Styles: Resetable {
  static func reset() {
    Styles.Button._Default = nil
    Styles.Button.Action._Accept = nil
    Styles.Button.Action._Cancel = nil
    
    
    Styles.Text._Default = nil
    Styles.Text._Title = nil
    
    Styles._TextField = nil
  }
}
struct Style {
  enum Attributes: String {
    case label
    case cornerRadius
    case borderColor
    case textColor
    case backgroundColor
    case font
  }
  var properties: [Attributes: Any]
}
extension Styles.Button {
  fileprivate static var _Default: Style!
  fileprivate static func get_Default() -> Style {
    if _Default == nil {
      let properties: [Style.Attributes: Any] = [
        .label: Styles.Text.Default,
        .cornerRadius: 10,
        .borderColor: UIColor(.pink),
        .textColor: UIColor(.green)
      ]
    
      _Default = Style(properties: properties)
    }
    return _Default
  }
}
extension Styles.Text {
  fileprivate static var _Default: Style!
  fileprivate static func get_Default() -> Style {
    if _Default == nil {
      let properties: [Style.Attributes: Any] = [
        .textColor: UIColor(.darkBlue),
        .font: UIFont(.regular, size: 20)
      ]
    
      _Default = Style(properties: properties)
    }
    return _Default
  }
  fileprivate static var _Title: Style!
  fileprivate static func get_Title() -> Style {
    if _Title == nil {
      let properties: [Style.Attributes: Any] = [
        .textColor: UIColor(.green),
        .font: UIFont(.bold, size: 20)
      ]
    
      _Title = Style(properties: properties)
    }
    return _Title
  }
}
extension Styles {
  fileprivate static var _TextField: Style!
  fileprivate static func get_TextField() -> Style {
    if _TextField == nil {
      let properties: [Style.Attributes: Any] = [
        .backgroundColor: UIColor(.yellow)
      ]
    
      _TextField = Style(properties: properties)
    }
    return _TextField
  }
}
extension Styles.Button.Action {
  fileprivate static var _Accept: Style!
  fileprivate static func get_Accept() -> Style {
    if _Accept == nil {
      let properties: [Style.Attributes: Any] = [
        .label: Styles.Text.Default,
        .cornerRadius: 10,
        .borderColor: UIColor(.pink),
        .textColor: UIColor(.pink),
        .font: UIFont(.bold, size: 20)
      ]
    
      _Accept = Style(properties: properties)
    }
    return _Accept
  }
  fileprivate static var _Cancel: Style!
  fileprivate static func get_Cancel() -> Style {
    if _Cancel == nil {
      let properties: [Style.Attributes: Any] = [
        .label: Styles.Text.Default,
        .cornerRadius: 10,
        .borderColor: UIColor(.pink),
        .textColor: UIColor(.darkBlue),
        .font: UIFont(.bold, size: 20)
      ]
    
      _Cancel = Style(properties: properties)
    }
    return _Cancel
  }
}
